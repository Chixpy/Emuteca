unit uPSI_ucEmuteca;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ucEmuteca = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_cEmuteca(CL: TPSPascalCompiler);
procedure SIRegister_cEmutecaCacheDataThread(CL: TPSPascalCompiler);
procedure SIRegister_ucEmuteca(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cEmuteca(CL: TPSRuntimeClassImporter);
procedure RIRegister_cEmutecaCacheDataThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_ucEmuteca(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   fgl
  ,FileUtil
  ,LazUTF8
  ,LazFileUtils
  ,dateutils
  ,sha1
  ,u7zWrapper
  ,uCHXStrUtils
  ,uEmutecaCommon
  ,uaEmutecaCustomGroup
  ,ucEmutecaConfig
  ,ucEmutecaEmulatorManager
  ,ucEmutecaSystemManager
  ,ucEmutecaSoftList
  ,ucEmutecaSoftware
  ,ucEmutecaSystem
  ,ucEmutecaEmulator
  ,ucEmuteca
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ucEmuteca]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_cEmuteca(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'cEmuteca') do
  with CL.AddClassN(CL.FindClass('TComponent'),'cEmuteca') do
  begin
    RegisterProperty('ProgressCallBack', 'TEmutecaProgressCallBack', iptrw);
    RegisterProperty('TempFolder', 'string', iptr);
    RegisterMethod('Procedure LoadConfig( aFile : string)');
    RegisterMethod('Procedure ClearAllData');
    RegisterMethod('Procedure LoadData');
    RegisterMethod('Procedure SaveData');
    RegisterMethod('Function SearchMainEmulator( aID : string) : cEmutecaEmulator');
    RegisterMethod('Procedure CacheData');
    RegisterMethod('Function RunSoftware( const aSoftware : cEmutecaSoftware) : integer');
    RegisterProperty('BaseFolder', 'string', iptrw);
    RegisterProperty('Config', 'cEmutecaConfig', iptr);
    RegisterProperty('SystemManager', 'cEmutecaSystemManager', iptr);
    RegisterProperty('EmulatorManager', 'cEmutecaEmulatorManager', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_cEmutecaCacheDataThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'cEmutecaCacheDataThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'cEmutecaCacheDataThread') do
  begin
    RegisterProperty('SystemManager', 'cEmutecaSystemManager', iptrw);
    RegisterProperty('TempFolder', 'string', iptrw);
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ucEmuteca(CL: TPSPascalCompiler);
begin
  SIRegister_cEmutecaCacheDataThread(CL);
  SIRegister_cEmuteca(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorManager_R(Self: cEmuteca; var T: cEmutecaEmulatorManager);
begin T := Self.EmulatorManager; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaSystemManager_R(Self: cEmuteca; var T: cEmutecaSystemManager);
begin T := Self.SystemManager; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaConfig_R(Self: cEmuteca; var T: cEmutecaConfig);
begin T := Self.Config; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaBaseFolder_W(Self: cEmuteca; const T: string);
begin Self.BaseFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaBaseFolder_R(Self: cEmuteca; var T: string);
begin T := Self.BaseFolder; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaTempFolder_R(Self: cEmuteca; var T: string);
begin T := Self.TempFolder; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaProgressCallBack_W(Self: cEmuteca; const T: TEmutecaProgressCallBack);
begin Self.ProgressCallBack := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaProgressCallBack_R(Self: cEmuteca; var T: TEmutecaProgressCallBack);
begin T := Self.ProgressCallBack; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaCacheDataThreadTempFolder_W(Self: cEmutecaCacheDataThread; const T: string);
begin Self.TempFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaCacheDataThreadTempFolder_R(Self: cEmutecaCacheDataThread; var T: string);
begin T := Self.TempFolder; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaCacheDataThreadSystemManager_W(Self: cEmutecaCacheDataThread; const T: cEmutecaSystemManager);
begin Self.SystemManager := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaCacheDataThreadSystemManager_R(Self: cEmutecaCacheDataThread; var T: cEmutecaSystemManager);
begin T := Self.SystemManager; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cEmuteca(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(cEmuteca) do
  begin
    RegisterPropertyHelper(@cEmutecaProgressCallBack_R,@cEmutecaProgressCallBack_W,'ProgressCallBack');
    RegisterPropertyHelper(@cEmutecaTempFolder_R,nil,'TempFolder');
    RegisterMethod(@cEmuteca.LoadConfig, 'LoadConfig');
    RegisterMethod(@cEmuteca.ClearAllData, 'ClearAllData');
    RegisterMethod(@cEmuteca.LoadData, 'LoadData');
    RegisterMethod(@cEmuteca.SaveData, 'SaveData');
    RegisterMethod(@cEmuteca.SearchMainEmulator, 'SearchMainEmulator');
    RegisterMethod(@cEmuteca.CacheData, 'CacheData');
    RegisterMethod(@cEmuteca.RunSoftware, 'RunSoftware');
    RegisterPropertyHelper(@cEmutecaBaseFolder_R,@cEmutecaBaseFolder_W,'BaseFolder');
    RegisterPropertyHelper(@cEmutecaConfig_R,nil,'Config');
    RegisterPropertyHelper(@cEmutecaSystemManager_R,nil,'SystemManager');
    RegisterPropertyHelper(@cEmutecaEmulatorManager_R,nil,'EmulatorManager');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cEmutecaCacheDataThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(cEmutecaCacheDataThread) do
  begin
    RegisterPropertyHelper(@cEmutecaCacheDataThreadSystemManager_R,@cEmutecaCacheDataThreadSystemManager_W,'SystemManager');
    RegisterPropertyHelper(@cEmutecaCacheDataThreadTempFolder_R,@cEmutecaCacheDataThreadTempFolder_W,'TempFolder');
    RegisterConstructor(@cEmutecaCacheDataThread.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ucEmuteca(CL: TPSRuntimeClassImporter);
begin
  RIRegister_cEmutecaCacheDataThread(CL);
  RIRegister_cEmuteca(CL);
end;

 
 
{ TPSImport_ucEmuteca }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ucEmuteca.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ucEmuteca(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ucEmuteca.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ucEmuteca(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
