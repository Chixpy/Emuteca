unit uPSI_ucEmutecaEmulator;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ucEmutecaEmulator = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_cEmutecaEmulator(CL: TPSPascalCompiler);
procedure SIRegister_ucEmutecaEmulator(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cEmutecaEmulator(CL: TPSRuntimeClassImporter);
procedure RIRegister_ucEmutecaEmulator(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   fgl
  ,FileUtil
  ,StrUtils
  ,LazUTF8
  ,LazFileUtils
  ,IniFiles
  ,uCHXStrUtils
  ,uaEmutecaStorable
  ,ucEmutecaEmulator
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ucEmutecaEmulator]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_cEmutecaEmulator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'caEmutecaStorableIni', 'cEmutecaEmulator') do
  with CL.AddClassN(CL.FindClass('caEmutecaStorableIni'),'cEmutecaEmulator') do
  begin
    RegisterMethod('Function Execute( GameFile : string) : integer');
    RegisterMethod('Function ExecuteAlone : integer');
    RegisterProperty('ID', 'string', iptrw);
    RegisterProperty('Enabled', 'boolean', iptrw);
    RegisterProperty('EmulatorName', 'string', iptrw);
    RegisterProperty('ExeFile', 'string', iptrw);
    RegisterProperty('WorkingFolder', 'string', iptrw);
    RegisterProperty('Parameters', 'string', iptrw);
    RegisterProperty('FileExt', 'TStringList', iptrw);
    RegisterProperty('ExitCode', 'integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ucEmutecaEmulator(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('krsEmulatorEnabledKey','String').SetString( 'Enabled');
 CL.AddConstantN('krsEmulatorNameKey','String').SetString( 'Name');
 CL.AddConstantN('krsEmulatorWorkingFoldeKey','String').SetString( 'WorkingFolder');
 CL.AddConstantN('krsEmulatorParameters','String').SetString( 'Parameters');
 CL.AddConstantN('krsEmulatorExitCodeKey','String').SetString( 'ExitCode');
 CL.AddConstantN('krsEmulatorExeFileKey','String').SetString( 'ExeFile');
 CL.AddConstantN('krsEmulatorFileExtKey','String').SetString( 'Extensions');
 CL.AddConstantN('kEmutecaEmuDirKey','String').SetString( '%EMUDIR%');
 CL.AddConstantN('kEmutecaRomDirKey','String').SetString( '%ROMDIR%');
 CL.AddConstantN('kEmutecaCurrentDirKey','String').SetString( '%CURRENTDIR%');
 CL.AddConstantN('kEmutecaROMPathKey','String').SetString( '%ROM%');
 CL.AddConstantN('kEmutecaROMFileNameKey','String').SetString( '%ROMNAME%');
 CL.AddConstantN('kEmutecaROMFileNameNoExtKey','String').SetString( '%ROMNAMENOEXT%');
 CL.AddConstantN('kEmutecaROMFileExtKey','String').SetString( '%ROMEXT%');
  SIRegister_cEmutecaEmulator(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorExitCode_W(Self: cEmutecaEmulator; const T: integer);
begin Self.ExitCode := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorExitCode_R(Self: cEmutecaEmulator; var T: integer);
begin T := Self.ExitCode; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorFileExt_W(Self: cEmutecaEmulator; const T: TStringList);
begin Self.FileExt := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorFileExt_R(Self: cEmutecaEmulator; var T: TStringList);
begin T := Self.FileExt; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorParameters_W(Self: cEmutecaEmulator; const T: string);
begin Self.Parameters := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorParameters_R(Self: cEmutecaEmulator; var T: string);
begin T := Self.Parameters; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorWorkingFolder_W(Self: cEmutecaEmulator; const T: string);
begin Self.WorkingFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorWorkingFolder_R(Self: cEmutecaEmulator; var T: string);
begin T := Self.WorkingFolder; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorExeFile_W(Self: cEmutecaEmulator; const T: string);
begin Self.ExeFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorExeFile_R(Self: cEmutecaEmulator; var T: string);
begin T := Self.ExeFile; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorEmulatorName_W(Self: cEmutecaEmulator; const T: string);
begin Self.EmulatorName := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorEmulatorName_R(Self: cEmutecaEmulator; var T: string);
begin T := Self.EmulatorName; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorEnabled_W(Self: cEmutecaEmulator; const T: boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorEnabled_R(Self: cEmutecaEmulator; var T: boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorID_W(Self: cEmutecaEmulator; const T: string);
begin Self.ID := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmutecaEmulatorID_R(Self: cEmutecaEmulator; var T: string);
begin T := Self.ID; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cEmutecaEmulator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(cEmutecaEmulator) do
  begin
    RegisterMethod(@cEmutecaEmulator.Execute, 'Execute');
    RegisterMethod(@cEmutecaEmulator.ExecuteAlone, 'ExecuteAlone');
    RegisterPropertyHelper(@cEmutecaEmulatorID_R,@cEmutecaEmulatorID_W,'ID');
    RegisterPropertyHelper(@cEmutecaEmulatorEnabled_R,@cEmutecaEmulatorEnabled_W,'Enabled');
    RegisterPropertyHelper(@cEmutecaEmulatorEmulatorName_R,@cEmutecaEmulatorEmulatorName_W,'EmulatorName');
    RegisterPropertyHelper(@cEmutecaEmulatorExeFile_R,@cEmutecaEmulatorExeFile_W,'ExeFile');
    RegisterPropertyHelper(@cEmutecaEmulatorWorkingFolder_R,@cEmutecaEmulatorWorkingFolder_W,'WorkingFolder');
    RegisterPropertyHelper(@cEmutecaEmulatorParameters_R,@cEmutecaEmulatorParameters_W,'Parameters');
    RegisterPropertyHelper(@cEmutecaEmulatorFileExt_R,@cEmutecaEmulatorFileExt_W,'FileExt');
    RegisterPropertyHelper(@cEmutecaEmulatorExitCode_R,@cEmutecaEmulatorExitCode_W,'ExitCode');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ucEmutecaEmulator(CL: TPSRuntimeClassImporter);
begin
  RIRegister_cEmutecaEmulator(CL);
end;

 
 
{ TPSImport_ucEmutecaEmulator }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ucEmutecaEmulator.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ucEmutecaEmulator(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ucEmutecaEmulator.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ucEmutecaEmulator(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
