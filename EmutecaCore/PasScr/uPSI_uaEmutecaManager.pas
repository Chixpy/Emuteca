unit uPSI_uaEmutecaManager;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uaEmutecaManager = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_caEmutecaManager(CL: TPSPascalCompiler);
procedure SIRegister_uaEmutecaManager(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_caEmutecaManager(CL: TPSRuntimeClassImporter);
procedure RIRegister_uaEmutecaManager(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   uEmutecaCommon
  ,uaCHXStorable
  ,uaEmutecaManager
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uaEmutecaManager]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_caEmutecaManager(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'caCHXStorable', 'caEmutecaManager') do
  with CL.AddClassN(CL.FindClass('caCHXStorable'),'caEmutecaManager') do
  begin
    RegisterProperty('ProgressCallBack', 'TEmutecaProgressCallBack', iptrw);
    RegisterMethod('Procedure AssingAllTo( aList : TStrings)');
    RegisterMethod('Procedure AssingEnabledTo( aList : TStrings)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uaEmutecaManager(CL: TPSPascalCompiler);
begin
  SIRegister_caEmutecaManager(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure caEmutecaManagerProgressCallBack_W(Self: caEmutecaManager; const T: TEmutecaProgressCallBack);
begin Self.ProgressCallBack := T; end;

(*----------------------------------------------------------------------------*)
procedure caEmutecaManagerProgressCallBack_R(Self: caEmutecaManager; var T: TEmutecaProgressCallBack);
begin T := Self.ProgressCallBack; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_caEmutecaManager(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(caEmutecaManager) do
  begin
    RegisterPropertyHelper(@caEmutecaManagerProgressCallBack_R,@caEmutecaManagerProgressCallBack_W,'ProgressCallBack');
    RegisterVirtualAbstractMethod(caEmutecaManager, nil, 'AssingAllTo');
    RegisterVirtualAbstractMethod(caEmutecaManager, nil, 'AssingEnabledTo');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uaEmutecaManager(CL: TPSRuntimeClassImporter);
begin
  RIRegister_caEmutecaManager(CL);
end;

 
 
{ TPSImport_uaEmutecaManager }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uaEmutecaManager.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uaEmutecaManager(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uaEmutecaManager.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uaEmutecaManager(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
