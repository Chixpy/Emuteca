unit uPSI_uGameManager;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uGameManager = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_cGameManager(CL: TPSPascalCompiler);
procedure SIRegister_uGameManager(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cGameManager(CL: TPSRuntimeClassImporter);
procedure RIRegister_uGameManager(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   contnrs
  ,FileUtil
  ,IniFiles
  ,LazUTF8
  ,uSystem
  ,uGame
  ,uGameGroup
  ,uEmulator
  ,uCustomUtils
  ,u7zWrapper
  ,uGameManager
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uGameManager]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_cGameManager(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'cGameManager') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'cGameManager') do
  begin
    RegisterProperty('SystemsFile', 'String', iptrw);
    RegisterProperty('EmulatorsFile', 'String', iptrw);
    RegisterProperty('GameDataFileExt', 'String', iptrw);
    RegisterProperty('GroupDataFileExt', 'String', iptrw);
    RegisterProperty('System', 'cSystem', iptr);
    RegisterProperty('Emulator', 'cEmulator', iptr);
    RegisterProperty('TempFolder', 'String', iptrw);
    RegisterProperty('TempFile', 'String', iptrw);
    RegisterProperty('CRCMaxSize', 'cardinal', iptrw);
    RegisterProperty('CompressedExt', 'TStringList', iptr);
//    RegisterProperty('ProgressCallBack', 'TGMProgressCallBack', iptrw);
    RegisterMethod('Function GameAtPos( const aIndex : integer) : cGame');
    RegisterMethod('Function Game( aGameKey : String) : cGame');
    RegisterMethod('Function GameCount : longint');
    RegisterMethod('Function GroupAtPos( const aIndex : integer) : cGameGroup');
    RegisterMethod('Function Group( aGroupKey : String) : cGameGroup');
    RegisterMethod('Function GroupCount : longint');
    RegisterMethod('Procedure SaveSystem');
    RegisterMethod('Procedure ChangeSystem( const SystemName : String)');
    RegisterMethod('Procedure ChangeEmulator( const EmulatorName : String)');
    RegisterMethod('Procedure PurgeGameData');
    RegisterMethod('Procedure UpdateGameList');
    RegisterMethod('Procedure SoftUpdateGameList');
    RegisterMethod('Procedure UpdateGroupList');
    RegisterMethod('Function AddFile( aFolder : String; Info : TSearchRec) : boolean');
    RegisterMethod('Function AddGame( const aFolder : String; const aFileName : String; const aKey : String) : cGame');
    RegisterMethod('Function AddGroup( aGameGroupID : String) : cGameGroup');
    RegisterMethod('Function GameMediaExists( aFolder : String; aGameVersion : cGame; Extensions : TStrings; MultiFile : boolean; SearchInZip : boolean) : boolean');
    RegisterMethod('Function GroupMediaExists( aFolder : String; aGameGroup : cGameGroup; Extensions : TStrings; MultiFile : boolean; SearchInZip : boolean) : boolean');
    RegisterMethod('Procedure SearchGameMedia( FileList : TStrings; aFolder : String; aGameVersion : cGame; Extensions : TStrings; MultiFile : boolean; SearchInZip : boolean)');
    RegisterMethod('Procedure SearchGroupMedia( FileList : TStrings; aFolder : String; aGameGroup : cGameGroup; Extensions : TStrings; MultiFile : boolean; SearchInZip : boolean)');
    RegisterMethod('Procedure SearchMediaFiles( FileList : TStrings; aFolder : String; aFileName : String; Extensions : TStrings; MultiFile : boolean; SearchInZip : boolean; ExtractFile : boolean)');
    RegisterMethod('Procedure SaveSystemGameList');
    RegisterMethod('Procedure LoadSystemGameList');
    RegisterMethod('Procedure ExportGameData( const aFileName : String; const ExportMode : boolean)');
    RegisterMethod('Procedure ExportGameDataIni( const aIniFile : TCustomIniFile; const ExportMode : boolean)');
    RegisterMethod('Procedure ImportGameData( const aFileName : String)');
    RegisterMethod('Procedure ImportGameDataIni( const aIniFile : TCustomIniFile)');
    RegisterMethod('Function Execute( aGame : cGame) : integer');
    RegisterMethod('Constructor Create( const aSystemsFile : String; const aTempFolder : String; const aTempFile : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uGameManager(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('CGMExecErrorNoGame','LongInt').SetInt( 300);
 CL.AddConstantN('CGMDecompressError','LongInt').SetInt( 301);
 CL.AddConstantN('CGMGameSubFolder','String').SetString( 'Game');
{
 CL.AddTypeS('TGMCallBackType', '( GMCBAddFile, GMCBImportData, GMCBExportData'
   +', GMCBSaveList, GMCBLoadList, GMCBDecompress )');
  CL.AddTypeS('TGMProgressCallBack', 'Function ( const TypeCB : TGMCallBackType'
   +'; const Info1, Info2 : String; const Value, MaxValue : int64) : boolea'
   +'n');
}
  SIRegister_cGameManager(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
{
procedure cGameManagerProgressCallBack_W(Self: cGameManager; const T: TGMProgressCallBack);
begin Self.ProgressCallBack := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerProgressCallBack_R(Self: cGameManager; var T: TGMProgressCallBack);
begin T := Self.ProgressCallBack; end;
}
(*----------------------------------------------------------------------------*)
procedure cGameManagerCompressedExt_R(Self: cGameManager; var T: TStringList);
begin T := Self.CompressedExt; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerCRCMaxSize_W(Self: cGameManager; const T: cardinal);
begin Self.CRCMaxSize := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerCRCMaxSize_R(Self: cGameManager; var T: cardinal);
begin T := Self.CRCMaxSize; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerTempFile_W(Self: cGameManager; const T: String);
begin Self.TempFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerTempFile_R(Self: cGameManager; var T: String);
begin T := Self.TempFile; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerTempFolder_W(Self: cGameManager; const T: String);
begin Self.TempFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerTempFolder_R(Self: cGameManager; var T: String);
begin T := Self.TempFolder; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerEmulator_R(Self: cGameManager; var T: cEmulator);
begin T := Self.Emulator; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerSystem_R(Self: cGameManager; var T: cSystem);
begin T := Self.System; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerGroupDataFileExt_W(Self: cGameManager; const T: String);
begin Self.GroupDataFileExt := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerGroupDataFileExt_R(Self: cGameManager; var T: String);
begin T := Self.GroupDataFileExt; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerGameDataFileExt_W(Self: cGameManager; const T: String);
begin Self.GameDataFileExt := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerGameDataFileExt_R(Self: cGameManager; var T: String);
begin T := Self.GameDataFileExt; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerEmulatorsFile_W(Self: cGameManager; const T: String);
begin Self.EmulatorsFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerEmulatorsFile_R(Self: cGameManager; var T: String);
begin T := Self.EmulatorsFile; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerSystemsFile_W(Self: cGameManager; const T: String);
begin Self.SystemsFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cGameManagerSystemsFile_R(Self: cGameManager; var T: String);
begin T := Self.SystemsFile; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cGameManager(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(cGameManager) do
  begin
    RegisterPropertyHelper(@cGameManagerSystemsFile_R,@cGameManagerSystemsFile_W,'SystemsFile');
    RegisterPropertyHelper(@cGameManagerEmulatorsFile_R,@cGameManagerEmulatorsFile_W,'EmulatorsFile');
    RegisterPropertyHelper(@cGameManagerGameDataFileExt_R,@cGameManagerGameDataFileExt_W,'GameDataFileExt');
    RegisterPropertyHelper(@cGameManagerGroupDataFileExt_R,@cGameManagerGroupDataFileExt_W,'GroupDataFileExt');
    RegisterPropertyHelper(@cGameManagerSystem_R,nil,'System');
    RegisterPropertyHelper(@cGameManagerEmulator_R,nil,'Emulator');
    RegisterPropertyHelper(@cGameManagerTempFolder_R,@cGameManagerTempFolder_W,'TempFolder');
    RegisterPropertyHelper(@cGameManagerTempFile_R,@cGameManagerTempFile_W,'TempFile');
    RegisterPropertyHelper(@cGameManagerCRCMaxSize_R,@cGameManagerCRCMaxSize_W,'CRCMaxSize');
    RegisterPropertyHelper(@cGameManagerCompressedExt_R,nil,'CompressedExt');
//    RegisterPropertyHelper(@cGameManagerProgressCallBack_R,@cGameManagerProgressCallBack_W,'ProgressCallBack');
    RegisterMethod(@cGameManager.GameAtPos, 'GameAtPos');
    RegisterMethod(@cGameManager.Game, 'Game');
    RegisterMethod(@cGameManager.GameCount, 'GameCount');
    RegisterMethod(@cGameManager.GroupAtPos, 'GroupAtPos');
    RegisterMethod(@cGameManager.Group, 'Group');
    RegisterMethod(@cGameManager.GroupCount, 'GroupCount');
    RegisterMethod(@cGameManager.SaveSystem, 'SaveSystem');
    RegisterMethod(@cGameManager.ChangeSystem, 'ChangeSystem');
    RegisterMethod(@cGameManager.ChangeEmulator, 'ChangeEmulator');
    RegisterMethod(@cGameManager.PurgeGameData, 'PurgeGameData');
    RegisterMethod(@cGameManager.UpdateGameList, 'UpdateGameList');
    RegisterMethod(@cGameManager.SoftUpdateGameList, 'SoftUpdateGameList');
    RegisterMethod(@cGameManager.UpdateGroupList, 'UpdateGroupList');
    RegisterMethod(@cGameManager.AddFile, 'AddFile');
    RegisterMethod(@cGameManager.AddGame, 'AddGame');
    RegisterMethod(@cGameManager.AddGroup, 'AddGroup');
    RegisterMethod(@cGameManager.GameMediaExists, 'GameMediaExists');
    RegisterMethod(@cGameManager.GroupMediaExists, 'GroupMediaExists');
    RegisterMethod(@cGameManager.SearchGameMedia, 'SearchGameMedia');
    RegisterMethod(@cGameManager.SearchGroupMedia, 'SearchGroupMedia');
    RegisterMethod(@cGameManager.SearchMediaFiles, 'SearchMediaFiles');
    RegisterMethod(@cGameManager.SaveSystemGameList, 'SaveSystemGameList');
    RegisterMethod(@cGameManager.LoadSystemGameList, 'LoadSystemGameList');
    RegisterMethod(@cGameManager.ExportGameData, 'ExportGameData');
    RegisterMethod(@cGameManager.ExportGameDataIni, 'ExportGameDataIni');
    RegisterMethod(@cGameManager.ImportGameData, 'ImportGameData');
    RegisterMethod(@cGameManager.ImportGameDataIni, 'ImportGameDataIni');
    RegisterMethod(@cGameManager.Execute, 'Execute');
    RegisterConstructor(@cGameManager.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uGameManager(CL: TPSRuntimeClassImporter);
begin
  RIRegister_cGameManager(CL);
end;

 
 
{ TPSImport_uGameManager }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uGameManager.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uGameManager(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uGameManager.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uGameManager(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
