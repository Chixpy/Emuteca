unit uPSI_uSystem;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uSystem = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_cSystem(CL: TPSPascalCompiler);
procedure SIRegister_uSystem(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cSystem(CL: TPSRuntimeClassImporter);
procedure RIRegister_uSystem(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IniFiles
  ,FileUtil
  ,uSystem
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uSystem]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_cSystem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'cSystem') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'cSystem') do
  begin
    RegisterProperty('Enabled', 'boolean', iptrw);
    RegisterProperty('ID', 'String', iptrw);
    RegisterProperty('Company', 'String', iptrw);
    RegisterProperty('Model', 'String', iptrw);
    RegisterProperty('FirstYear', 'String', iptrw);
    RegisterProperty('LastYear', 'String', iptrw);
    RegisterProperty('Extensions', 'TStringList', iptr);
    RegisterProperty('Icon', 'String', iptrw);
    RegisterProperty('Image', 'String', iptrw);
    RegisterProperty('InfoText', 'String', iptrw);
    RegisterProperty('DataFile', 'String', iptrw);
    RegisterProperty('ExtractAll', 'boolean', iptrw);
    RegisterProperty('UseCRC', 'boolean', iptrw);
    RegisterProperty('TempFolder', 'String', iptrw);
    RegisterProperty('BaseFolder', 'String', iptrw);
    RegisterProperty('GameFolder', 'String', iptrw);
    RegisterProperty('RecursiveGameFolder', 'boolean', iptrw);
    RegisterProperty('IconFolder', 'String', iptrw);
    RegisterProperty('MarqueeFolder', 'String', iptrw);
    RegisterProperty('ImageFolders', 'TStringList', iptr);
    RegisterProperty('ImageCaptions', 'TStringList', iptr);
    RegisterProperty('ImageModes', 'TStringList', iptr);
    RegisterProperty('TextFolders', 'TStringList', iptr);
    RegisterProperty('TextCaptions', 'TStringList', iptr);
    RegisterProperty('TextModes', 'TStringList', iptr);
    RegisterProperty('DemoMusicFolder', 'String', iptrw);
    RegisterProperty('MusicFolders', 'TStringList', iptr);
    RegisterProperty('MusicCaptions', 'TStringList', iptr);
    RegisterProperty('MusicExtensions', 'TStringList', iptr);
    RegisterProperty('MusicExecutables', 'TStringList', iptr);
    RegisterProperty('MusicParameters', 'TStringList', iptr);
    RegisterProperty('DemoVideoFolder', 'String', iptrw);
    RegisterProperty('VideoFolders', 'TStringList', iptr);
    RegisterProperty('VideoCaptions', 'TStringList', iptr);
    RegisterProperty('VideoExtensions', 'TStringList', iptr);
    RegisterProperty('VideoExecutables', 'TStringList', iptr);
    RegisterProperty('VideoParameters', 'TStringList', iptr);
    RegisterProperty('MainEmulator', 'String', iptrw);
    RegisterProperty('OtherEmulators', 'TStringList', iptr);
    RegisterMethod('Procedure LoadFromFile( const IniFile : String)');
    RegisterMethod('Procedure LoadFromFileIni( IniFile : TCustomIniFile)');
    RegisterMethod('Procedure SaveToFile( const IniFile : String; const ExportMode : boolean)');
    RegisterMethod('Procedure SaveToFileIni( IniFile : TCustomIniFile; const ExportMode : boolean)');
    RegisterMethod('Constructor Create( const AName : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uSystem(CL: TPSPascalCompiler);
begin
  SIRegister_cSystem(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure cSystemOtherEmulators_R(Self: cSystem; var T: TStringList);
begin T := Self.OtherEmulators; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMainEmulator_W(Self: cSystem; const T: String);
begin Self.MainEmulator := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMainEmulator_R(Self: cSystem; var T: String);
begin T := Self.MainEmulator; end;

(*----------------------------------------------------------------------------*)
procedure cSystemVideoExecutables_R(Self: cSystem; var T: TStringList);
begin T := Self.VideoExecutables; end;

(*----------------------------------------------------------------------------*)
procedure cSystemVideoParameters_R(Self: cSystem; var T: TStringList);
begin T := Self.VideoParameters; end;

(*----------------------------------------------------------------------------*)
procedure cSystemVideoExtensions_R(Self: cSystem; var T: TStringList);
begin T := Self.VideoExtensions; end;

(*----------------------------------------------------------------------------*)
procedure cSystemVideoCaptions_R(Self: cSystem; var T: TStringList);
begin T := Self.VideoCaptions; end;

(*----------------------------------------------------------------------------*)
procedure cSystemVideoFolders_R(Self: cSystem; var T: TStringList);
begin T := Self.VideoFolders; end;

(*----------------------------------------------------------------------------*)
procedure cSystemDemoVideoFolder_W(Self: cSystem; const T: String);
begin Self.DemoVideoFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemDemoVideoFolder_R(Self: cSystem; var T: String);
begin T := Self.DemoVideoFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMusicExecutables_R(Self: cSystem; var T: TStringList);
begin T := Self.MusicExecutables; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMusicParameters_R(Self: cSystem; var T: TStringList);
begin T := Self.MusicParameters; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMusicExtensions_R(Self: cSystem; var T: TStringList);
begin T := Self.MusicExtensions; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMusicCaptions_R(Self: cSystem; var T: TStringList);
begin T := Self.MusicCaptions; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMusicFolders_R(Self: cSystem; var T: TStringList);
begin T := Self.MusicFolders; end;

(*----------------------------------------------------------------------------*)
procedure cSystemDemoMusicFolder_W(Self: cSystem; const T: String);
begin Self.DemoMusicFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemDemoMusicFolder_R(Self: cSystem; var T: String);
begin T := Self.DemoMusicFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemTextCaptions_R(Self: cSystem; var T: TStringList);
begin T := Self.TextCaptions; end;

(*----------------------------------------------------------------------------*)
procedure cSystemTextFolders_R(Self: cSystem; var T: TStringList);
begin T := Self.TextFolders; end;

(*----------------------------------------------------------------------------*)
procedure cSystemImageCaptions_R(Self: cSystem; var T: TStringList);
begin T := Self.ImageCaptions; end;

(*----------------------------------------------------------------------------*)
procedure cSystemImageFolders_R(Self: cSystem; var T: TStringList);
begin T := Self.ImageFolders; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMarqueeFolder_W(Self: cSystem; const T: String);
begin Self.MarqueeFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemMarqueeFolder_R(Self: cSystem; var T: String);
begin T := Self.MarqueeFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemIconFolder_W(Self: cSystem; const T: String);
begin Self.IconFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemIconFolder_R(Self: cSystem; var T: String);
begin T := Self.IconFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemRecursiveGameFolder_W(Self: cSystem; const T: boolean);
begin Self.RecursiveGameFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemRecursiveGameFolder_R(Self: cSystem; var T: boolean);
begin T := Self.RecursiveGameFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemGameFolder_W(Self: cSystem; const T: String);
begin Self.GameFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemGameFolder_R(Self: cSystem; var T: String);
begin T := Self.GameFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemBaseFolder_W(Self: cSystem; const T: String);
begin Self.BaseFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemBaseFolder_R(Self: cSystem; var T: String);
begin T := Self.BaseFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemTempFolder_W(Self: cSystem; const T: String);
begin Self.TempFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemTempFolder_R(Self: cSystem; var T: String);
begin T := Self.TempFolder; end;

(*----------------------------------------------------------------------------*)
procedure cSystemUseCRC_W(Self: cSystem; const T: boolean);
begin Self.UseCRC := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemUseCRC_R(Self: cSystem; var T: boolean);
begin T := Self.UseCRC; end;

(*----------------------------------------------------------------------------*)
procedure cSystemExtractAll_W(Self: cSystem; const T: boolean);
begin Self.ExtractAll := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemExtractAll_R(Self: cSystem; var T: boolean);
begin T := Self.ExtractAll; end;

(*----------------------------------------------------------------------------*)
procedure cSystemDataFile_W(Self: cSystem; const T: String);
begin Self.DataFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemDataFile_R(Self: cSystem; var T: String);
begin T := Self.DataFile; end;

(*----------------------------------------------------------------------------*)
procedure cSystemInfoText_W(Self: cSystem; const T: String);
begin Self.InfoText := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemInfoText_R(Self: cSystem; var T: String);
begin T := Self.InfoText; end;

(*----------------------------------------------------------------------------*)
procedure cSystemImage_W(Self: cSystem; const T: String);
begin Self.Image := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemImage_R(Self: cSystem; var T: String);
begin T := Self.Image; end;

(*----------------------------------------------------------------------------*)
procedure cSystemIcon_W(Self: cSystem; const T: String);
begin Self.Icon := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemIcon_R(Self: cSystem; var T: String);
begin T := Self.Icon; end;

(*----------------------------------------------------------------------------*)
procedure cSystemExtensions_R(Self: cSystem; var T: TStringList);
begin T := Self.Extensions; end;

(*----------------------------------------------------------------------------*)
procedure cSystemLastYear_W(Self: cSystem; const T: String);
begin Self.LastYear := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemLastYear_R(Self: cSystem; var T: String);
begin T := Self.LastYear; end;

(*----------------------------------------------------------------------------*)
procedure cSystemFirstYear_W(Self: cSystem; const T: String);
begin Self.FirstYear := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemFirstYear_R(Self: cSystem; var T: String);
begin T := Self.FirstYear; end;

(*----------------------------------------------------------------------------*)
procedure cSystemModel_W(Self: cSystem; const T: String);
begin Self.Model := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemModel_R(Self: cSystem; var T: String);
begin T := Self.Model; end;

(*----------------------------------------------------------------------------*)
procedure cSystemCompany_W(Self: cSystem; const T: String);
begin Self.Company := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemCompany_R(Self: cSystem; var T: String);
begin T := Self.Company; end;

(*----------------------------------------------------------------------------*)
procedure cSystemID_W(Self: cSystem; const T: String);
begin Self.ID := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemID_R(Self: cSystem; var T: String);
begin T := Self.ID; end;

(*----------------------------------------------------------------------------*)
procedure cSystemEnabled_W(Self: cSystem; const T: boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure cSystemEnabled_R(Self: cSystem; var T: boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cSystem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(cSystem) do
  begin
    RegisterPropertyHelper(@cSystemEnabled_R,@cSystemEnabled_W,'Enabled');
    RegisterPropertyHelper(@cSystemID_R,@cSystemID_W,'ID');
    RegisterPropertyHelper(@cSystemCompany_R,@cSystemCompany_W,'Company');
    RegisterPropertyHelper(@cSystemModel_R,@cSystemModel_W,'Model');
    RegisterPropertyHelper(@cSystemFirstYear_R,@cSystemFirstYear_W,'FirstYear');
    RegisterPropertyHelper(@cSystemLastYear_R,@cSystemLastYear_W,'LastYear');
    RegisterPropertyHelper(@cSystemExtensions_R,nil,'Extensions');
    RegisterPropertyHelper(@cSystemIcon_R,@cSystemIcon_W,'Icon');
    RegisterPropertyHelper(@cSystemImage_R,@cSystemImage_W,'Image');
    RegisterPropertyHelper(@cSystemInfoText_R,@cSystemInfoText_W,'InfoText');
    RegisterPropertyHelper(@cSystemDataFile_R,@cSystemDataFile_W,'DataFile');
    RegisterPropertyHelper(@cSystemExtractAll_R,@cSystemExtractAll_W,'ExtractAll');
    RegisterPropertyHelper(@cSystemUseCRC_R,@cSystemUseCRC_W,'UseCRC');
    RegisterPropertyHelper(@cSystemTempFolder_R,@cSystemTempFolder_W,'TempFolder');
    RegisterPropertyHelper(@cSystemBaseFolder_R,@cSystemBaseFolder_W,'BaseFolder');
    RegisterPropertyHelper(@cSystemGameFolder_R,@cSystemGameFolder_W,'GameFolder');
    RegisterPropertyHelper(@cSystemRecursiveGameFolder_R,@cSystemRecursiveGameFolder_W,'RecursiveGameFolder');
    RegisterPropertyHelper(@cSystemIconFolder_R,@cSystemIconFolder_W,'IconFolder');
    RegisterPropertyHelper(@cSystemMarqueeFolder_R,@cSystemMarqueeFolder_W,'MarqueeFolder');
    RegisterPropertyHelper(@cSystemImageFolders_R,nil,'ImageFolders');
    RegisterPropertyHelper(@cSystemImageCaptions_R,nil,'ImageCaptions');
    RegisterPropertyHelper(@cSystemTextFolders_R,nil,'TextFolders');
    RegisterPropertyHelper(@cSystemTextCaptions_R,nil,'TextCaptions');
    RegisterPropertyHelper(@cSystemDemoMusicFolder_R,@cSystemDemoMusicFolder_W,'DemoMusicFolder');
    RegisterPropertyHelper(@cSystemMusicFolders_R,nil,'MusicFolders');
    RegisterPropertyHelper(@cSystemMusicCaptions_R,nil,'MusicCaptions');
    RegisterPropertyHelper(@cSystemMusicExtensions_R,nil,'MusicExtensions');
    RegisterPropertyHelper(@cSystemMusicExecutables_R,nil,'MusicExecutables');
    RegisterPropertyHelper(@cSystemMusicParameters_R,nil,'MusicParameters');
    RegisterPropertyHelper(@cSystemDemoVideoFolder_R,@cSystemDemoVideoFolder_W,'DemoVideoFolder');
    RegisterPropertyHelper(@cSystemVideoFolders_R,nil,'VideoFolders');
    RegisterPropertyHelper(@cSystemVideoCaptions_R,nil,'VideoCaptions');
    RegisterPropertyHelper(@cSystemVideoExtensions_R,nil,'VideoExtensions');
    RegisterPropertyHelper(@cSystemVideoExecutables_R,nil,'VideoExecutables');
    RegisterPropertyHelper(@cSystemVideoParameters_R,nil,'VideoParameters');
    RegisterPropertyHelper(@cSystemMainEmulator_R,@cSystemMainEmulator_W,'MainEmulator');
    RegisterPropertyHelper(@cSystemOtherEmulators_R,nil,'OtherEmulators');
    RegisterMethod(@cSystem.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@cSystem.LoadFromFileIni, 'LoadFromFileIni');
    RegisterMethod(@cSystem.SaveToFile, 'SaveToFile');
    RegisterMethod(@cSystem.SaveToFileIni, 'SaveToFileIni');
    RegisterConstructor(@cSystem.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uSystem(CL: TPSRuntimeClassImporter);
begin
  RIRegister_cSystem(CL);
end;

 
 
{ TPSImport_uSystem }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uSystem.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uSystem(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uSystem.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uSystem(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
