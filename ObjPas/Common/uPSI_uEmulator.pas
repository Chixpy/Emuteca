unit uPSI_uEmulator;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uEmulator = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_cEmulator(CL: TPSPascalCompiler);
procedure SIRegister_uEmulator(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_cEmulator(CL: TPSRuntimeClassImporter);
procedure RIRegister_uEmulator(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   FileUtil
  ,IniFiles
  ,strutils
  ,uGameStats
  ,uCustomUtils
  ,uEmulator
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uEmulator]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_cEmulator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'cGameStats', 'cEmulator') do
  with CL.AddClassN(CL.FindClass('cGameStats'),'cEmulator') do
  begin
    RegisterProperty('Enabled', 'boolean', iptrw);
    RegisterProperty('ID', 'String', iptrw);
    RegisterProperty('Name', 'String', iptrw);
    RegisterProperty('Developer', 'String', iptrw);
    RegisterProperty('WebPage', 'String', iptrw);
    RegisterProperty('Image', 'String', iptrw);
    RegisterProperty('Icon', 'String', iptrw);
    RegisterProperty('ExeFile', 'String', iptrw);
    RegisterProperty('WorkingFolder', 'String', iptrw);
    RegisterProperty('Parameters', 'String', iptrw);
    RegisterProperty('InfoFile', 'String', iptrw);
    RegisterProperty('ConfigFile', 'String', iptrw);
    RegisterProperty('NormalExitCode', 'Integer', iptrw);
    RegisterMethod('Function Execute( const GameFile : String) : Integer');
    RegisterMethod('Procedure LoadFromFile( const IniFile : String)');
    RegisterMethod('Procedure LoadFromFileIni( aIniFile : TMemIniFile)');
    RegisterMethod('Procedure SaveToFile( const aIniFile : String; const ExportMode : boolean)');
    RegisterMethod('Procedure SaveToFileIni( IniFile : TMemIniFile; const ExportMode : boolean)');
    RegisterMethod('Constructor Create( const EmulatorID : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uEmulator(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('CEmuDir','String').SetString( '%EMUDIR%');
 CL.AddConstantN('CRomDir','String').SetString( '%ROMDIR%');
 CL.AddConstantN('CCurrentDir','String').SetString( '%CURRENTDIR%');
 CL.AddConstantN('CROMPath','String').SetString( '%ROM%');
 CL.AddConstantN('CROMName','String').SetString( '%ROMNAME%');
 CL.AddConstantN('CROMNameNoExt','String').SetString( '%ROMNAMENOEXT%');
 CL.AddConstantN('CROMExt','String').SetString( '%ROMEXT%');
 CL.AddConstantN('CROMNull','String').SetString( '%_%');
  SIRegister_cEmulator(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure cEmulatorNormalExitCode_W(Self: cEmulator; const T: Integer);
begin Self.NormalExitCode := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorNormalExitCode_R(Self: cEmulator; var T: Integer);
begin T := Self.NormalExitCode; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorConfigFile_W(Self: cEmulator; const T: String);
begin Self.ConfigFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorConfigFile_R(Self: cEmulator; var T: String);
begin T := Self.ConfigFile; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorInfoFile_W(Self: cEmulator; const T: String);
begin Self.InfoFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorInfoFile_R(Self: cEmulator; var T: String);
begin T := Self.InfoFile; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorParameters_W(Self: cEmulator; const T: String);
begin Self.Parameters := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorParameters_R(Self: cEmulator; var T: String);
begin T := Self.Parameters; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorWorkingFolder_W(Self: cEmulator; const T: String);
begin Self.WorkingFolder := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorWorkingFolder_R(Self: cEmulator; var T: String);
begin T := Self.WorkingFolder; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorExeFile_W(Self: cEmulator; const T: String);
begin Self.ExeFile := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorExeFile_R(Self: cEmulator; var T: String);
begin T := Self.ExeFile; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorIcon_W(Self: cEmulator; const T: String);
begin Self.Icon := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorIcon_R(Self: cEmulator; var T: String);
begin T := Self.Icon; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorImage_W(Self: cEmulator; const T: String);
begin Self.Image := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorImage_R(Self: cEmulator; var T: String);
begin T := Self.Image; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorWebPage_W(Self: cEmulator; const T: String);
begin Self.WebPage := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorWebPage_R(Self: cEmulator; var T: String);
begin T := Self.WebPage; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorDeveloper_W(Self: cEmulator; const T: String);
begin Self.Developer := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorDeveloper_R(Self: cEmulator; var T: String);
begin T := Self.Developer; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorName_W(Self: cEmulator; const T: String);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorName_R(Self: cEmulator; var T: String);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorID_W(Self: cEmulator; const T: String);
begin Self.ID := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorID_R(Self: cEmulator; var T: String);
begin T := Self.ID; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorEnabled_W(Self: cEmulator; const T: boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure cEmulatorEnabled_R(Self: cEmulator; var T: boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_cEmulator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(cEmulator) do
  begin
    RegisterPropertyHelper(@cEmulatorEnabled_R,@cEmulatorEnabled_W,'Enabled');
    RegisterPropertyHelper(@cEmulatorID_R,@cEmulatorID_W,'ID');
    RegisterPropertyHelper(@cEmulatorName_R,@cEmulatorName_W,'Name');
    RegisterPropertyHelper(@cEmulatorDeveloper_R,@cEmulatorDeveloper_W,'Developer');
    RegisterPropertyHelper(@cEmulatorWebPage_R,@cEmulatorWebPage_W,'WebPage');
    RegisterPropertyHelper(@cEmulatorImage_R,@cEmulatorImage_W,'Image');
    RegisterPropertyHelper(@cEmulatorIcon_R,@cEmulatorIcon_W,'Icon');
    RegisterPropertyHelper(@cEmulatorExeFile_R,@cEmulatorExeFile_W,'ExeFile');
    RegisterPropertyHelper(@cEmulatorWorkingFolder_R,@cEmulatorWorkingFolder_W,'WorkingFolder');
    RegisterPropertyHelper(@cEmulatorParameters_R,@cEmulatorParameters_W,'Parameters');
    RegisterPropertyHelper(@cEmulatorInfoFile_R,@cEmulatorInfoFile_W,'InfoFile');
    RegisterPropertyHelper(@cEmulatorConfigFile_R,@cEmulatorConfigFile_W,'ConfigFile');
    RegisterPropertyHelper(@cEmulatorNormalExitCode_R,@cEmulatorNormalExitCode_W,'NormalExitCode');
    RegisterMethod(@cEmulator.Execute, 'Execute');
    RegisterMethod(@cEmulator.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@cEmulator.LoadFromFileIni, 'LoadFromFileIni');
    RegisterMethod(@cEmulator.SaveToFile, 'SaveToFile');
    RegisterMethod(@cEmulator.SaveToFileIni, 'SaveToFileIni');
    RegisterConstructor(@cEmulator.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uEmulator(CL: TPSRuntimeClassImporter);
begin
  RIRegister_cEmulator(CL);
end;

 
 
{ TPSImport_uEmulator }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uEmulator.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uEmulator(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uEmulator.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uEmulator(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
